{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#ipython nbconvert FinalProject.ipynb --to slides\n",
    "#ipython nbconvert FinalProject.ipynb --to slides --post serve"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Housing Prices\n",
    "Nico Espinosa"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Problem\n",
    "Predict housing prices based on a number of descriptive variables about a house, as well as the final sale price.\n",
    "\n",
    "By understanding what features of a house lead to a greater increase in final sale price, this can lead to smarter decision making:\n",
    "- Building a house -> where/what qualities to incorporate\n",
    "- Potentially smarter renovations -> improving what parts of the house will lead to the greatest profit\n",
    "- More accurate understanding of what your house will sell for\n",
    "\n",
    "## Hypothesis\n",
    "- Size of the house will have the largest impact on the final sale price"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Data\n",
    "- Accessed from Kaggle competition\n",
    "- Approximately 80 columns, or descriptive variables about houses in Iowa\n",
    "    - A bit over half categorical\n",
    "        - Categorical variables range from 4 to 15 categories\n",
    "- Target variable will be the final sale price of the house"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "import pylab as pl\n",
    "import numpy as np\n",
    "from sklearn import metrics\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import *\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "import seaborn as sns\n",
    "from sklearn import preprocessing\n",
    "import math\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn import model_selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "prices = pd.read_csv('housing_price_train.csv')\n",
    "\n",
    "target = 'SalePrice'\n",
    "\n",
    "predictors = []\n",
    "for i in prices.columns:\n",
    "    if i != \"SalePrice\" and i != \"Id\":\n",
    "        predictors.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities    ...     PoolArea PoolQC Fence MiscFeature MiscVal  \\\n",
       "0         Lvl    AllPub    ...            0    NaN   NaN         NaN       0   \n",
       "1         Lvl    AllPub    ...            0    NaN   NaN         NaN       0   \n",
       "2         Lvl    AllPub    ...            0    NaN   NaN         NaN       0   \n",
       "3         Lvl    AllPub    ...            0    NaN   NaN         NaN       0   \n",
       "4         Lvl    AllPub    ...            0    NaN   NaN         NaN       0   \n",
       "\n",
       "  MoSold YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0      2   2008        WD         Normal     208500  \n",
       "1      5   2007        WD         Normal     181500  \n",
       "2      9   2008        WD         Normal     223500  \n",
       "3      2   2006        WD        Abnorml     140000  \n",
       "4     12   2008        WD         Normal     250000  \n",
       "\n",
       "[5 rows x 81 columns]"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "MSSubClass: Identifies the type of dwelling involved in the sale.\t\n",
    "\n",
    "        20\t1-STORY 1946 & NEWER ALL STYLES\n",
    "        30\t1-STORY 1945 & OLDER\n",
    "        40\t1-STORY W/FINISHED ATTIC ALL AGES\n",
    "        45\t1-1/2 STORY - UNFINISHED ALL AGES\n",
    "        50\t1-1/2 STORY FINISHED ALL AGES\n",
    "        60\t2-STORY 1946 & NEWER\n",
    "        70\t2-STORY 1945 & OLDER\n",
    "        75\t2-1/2 STORY ALL AGES\n",
    "        80\tSPLIT OR MULTI-LEVEL\n",
    "        85\tSPLIT FOYER\n",
    "        90\tDUPLEX - ALL STYLES AND AGES\n",
    "       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n",
    "       150\t1-1/2 STORY PUD - ALL AGES\n",
    "       160\t2-STORY PUD - 1946 & NEWER\n",
    "       180\tPUD - MULTILEVEL - INCL SPLIT LEV/FOYER\n",
    "       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n",
    "\n",
    "MSZoning: Identifies the general zoning classification of the sale.\n",
    "\t\t\n",
    "       A\tAgriculture\n",
    "       C\tCommercial\n",
    "       FV\tFloating Village Residential\n",
    "       I\tIndustrial\n",
    "       RH\tResidential High Density\n",
    "       RL\tResidential Low Density\n",
    "       RP\tResidential Low Density Park \n",
    "       RM\tResidential Medium Density\n",
    "\t\n",
    "LotFrontage: Linear feet of street connected to property\n",
    "\n",
    "LotArea: Lot size in square feet\n",
    "\n",
    "Street: Type of road access to property\n",
    "\n",
    "       Grvl\tGravel\t\n",
    "       Pave\tPaved\n",
    "       \t\n",
    "Alley: Type of alley access to property\n",
    "\n",
    "       Grvl\tGravel\n",
    "       Pave\tPaved\n",
    "       NA \tNo alley access"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Id                 int64\n",
      "MSSubClass         int64\n",
      "MSZoning          object\n",
      "LotFrontage      float64\n",
      "LotArea            int64\n",
      "Street            object\n",
      "Alley             object\n",
      "LotShape          object\n",
      "LandContour       object\n",
      "Utilities         object\n",
      "LotConfig         object\n",
      "LandSlope         object\n",
      "Neighborhood      object\n",
      "Condition1        object\n",
      "Condition2        object\n",
      "BldgType          object\n",
      "HouseStyle        object\n",
      "OverallQual        int64\n",
      "OverallCond        int64\n",
      "YearBuilt          int64\n",
      "YearRemodAdd       int64\n",
      "RoofStyle         object\n",
      "RoofMatl          object\n",
      "Exterior1st       object\n",
      "Exterior2nd       object\n",
      "MasVnrType        object\n",
      "MasVnrArea       float64\n",
      "ExterQual         object\n",
      "ExterCond         object\n",
      "Foundation        object\n",
      "                  ...   \n",
      "BedroomAbvGr       int64\n",
      "KitchenAbvGr       int64\n",
      "KitchenQual       object\n",
      "TotRmsAbvGrd       int64\n",
      "Functional        object\n",
      "Fireplaces         int64\n",
      "FireplaceQu       object\n",
      "GarageType        object\n",
      "GarageYrBlt      float64\n",
      "GarageFinish      object\n",
      "GarageCars         int64\n",
      "GarageArea         int64\n",
      "GarageQual        object\n",
      "GarageCond        object\n",
      "PavedDrive        object\n",
      "WoodDeckSF         int64\n",
      "OpenPorchSF        int64\n",
      "EnclosedPorch      int64\n",
      "3SsnPorch          int64\n",
      "ScreenPorch        int64\n",
      "PoolArea           int64\n",
      "PoolQC            object\n",
      "Fence             object\n",
      "MiscFeature       object\n",
      "MiscVal            int64\n",
      "MoSold             int64\n",
      "YrSold             int64\n",
      "SaleType          object\n",
      "SaleCondition     object\n",
      "SalePrice          int64\n",
      "Length: 81, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print prices.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Data Cleaning\n",
    "- Many null values, particularly in categorical variables\n",
    "    - Null values actually had meaning in categorical variables:\n",
    "        - NA meant that feature did not exist in the house\n",
    "            - Replaced null with None (categorical variable)\n",
    "    - Null values in numerical variables were replaced with 0\n",
    "        - This was done when the feature did not exist\n",
    "            - Ex. Pool size -> 0 if there is no pool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities    ...     PoolArea PoolQC Fence MiscFeature MiscVal  \\\n",
       "0         Lvl    AllPub    ...            0    NaN   NaN         NaN       0   \n",
       "1         Lvl    AllPub    ...            0    NaN   NaN         NaN       0   \n",
       "2         Lvl    AllPub    ...            0    NaN   NaN         NaN       0   \n",
       "3         Lvl    AllPub    ...            0    NaN   NaN         NaN       0   \n",
       "4         Lvl    AllPub    ...            0    NaN   NaN         NaN       0   \n",
       "\n",
       "  MoSold YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0      2   2008        WD         Normal     208500  \n",
       "1      5   2007        WD         Normal     181500  \n",
       "2      9   2008        WD         Normal     223500  \n",
       "3      2   2006        WD        Abnorml     140000  \n",
       "4     12   2008        WD         Normal     250000  \n",
       "\n",
       "[5 rows x 81 columns]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "predictors_objects = []\n",
    "for i in prices.columns:\n",
    "    if prices[i].dtype == \"object\":\n",
    "        predictors_objects.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "predictors = []\n",
    "for i in prices.columns:\n",
    "    if i != \"SalePrice\" and i != \"Id\":\n",
    "        predictors.append(i)\n",
    "\n",
    "for i in predictors:\n",
    "    if prices[i].dtype == 'object':\n",
    "        prices[i].fillna(value = \"None\", inplace = True)\n",
    "\n",
    "prices.MasVnrArea.fillna(value = 0, inplace = True)\n",
    "prices.LotFrontage.fillna(value = 0, inplace = True)\n",
    "prices.GarageYrBlt.fillna(value = 0, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>...</th>\n",
       "      <th>SaleType_ConLI</th>\n",
       "      <th>SaleType_ConLw</th>\n",
       "      <th>SaleType_New</th>\n",
       "      <th>SaleType_Oth</th>\n",
       "      <th>SaleType_WD</th>\n",
       "      <th>SaleCondition_AdjLand</th>\n",
       "      <th>SaleCondition_Alloca</th>\n",
       "      <th>SaleCondition_Family</th>\n",
       "      <th>SaleCondition_Normal</th>\n",
       "      <th>SaleCondition_Partial</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2003</td>\n",
       "      <td>2003</td>\n",
       "      <td>196.0</td>\n",
       "      <td>706</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>1976</td>\n",
       "      <td>1976</td>\n",
       "      <td>0.0</td>\n",
       "      <td>978</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2001</td>\n",
       "      <td>2002</td>\n",
       "      <td>162.0</td>\n",
       "      <td>486</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>1915</td>\n",
       "      <td>1970</td>\n",
       "      <td>0.0</td>\n",
       "      <td>216</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>350.0</td>\n",
       "      <td>655</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 262 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass  LotFrontage  LotArea  OverallQual  OverallCond  YearBuilt  \\\n",
       "0   1          60         65.0     8450            7            5       2003   \n",
       "1   2          20         80.0     9600            6            8       1976   \n",
       "2   3          60         68.0    11250            7            5       2001   \n",
       "3   4          70         60.0     9550            7            5       1915   \n",
       "4   5          60         84.0    14260            8            5       2000   \n",
       "\n",
       "   YearRemodAdd  MasVnrArea  BsmtFinSF1          ...            \\\n",
       "0          2003       196.0         706          ...             \n",
       "1          1976         0.0         978          ...             \n",
       "2          2002       162.0         486          ...             \n",
       "3          1970         0.0         216          ...             \n",
       "4          2000       350.0         655          ...             \n",
       "\n",
       "   SaleType_ConLI  SaleType_ConLw  SaleType_New  SaleType_Oth  SaleType_WD  \\\n",
       "0               0               0             0             0            1   \n",
       "1               0               0             0             0            1   \n",
       "2               0               0             0             0            1   \n",
       "3               0               0             0             0            1   \n",
       "4               0               0             0             0            1   \n",
       "\n",
       "   SaleCondition_AdjLand  SaleCondition_Alloca  SaleCondition_Family  \\\n",
       "0                      0                     0                     0   \n",
       "1                      0                     0                     0   \n",
       "2                      0                     0                     0   \n",
       "3                      0                     0                     0   \n",
       "4                      0                     0                     0   \n",
       "\n",
       "   SaleCondition_Normal  SaleCondition_Partial  \n",
       "0                     1                      0  \n",
       "1                     1                      0  \n",
       "2                     1                      0  \n",
       "3                     0                      0  \n",
       "4                     1                      0  \n",
       "\n",
       "[5 rows x 262 columns]"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices = pd.get_dummies(prices, columns = predictors_objects, drop_first = True)\n",
    "prices.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "predictors = []\n",
    "for i in prices.columns:\n",
    "    if i != \"SalePrice\" and i != \"Id\":\n",
    "        predictors.append(i)\n",
    "        \n",
    "for i in predictors:\n",
    "    if prices[i].isnull().sum() > 0:\n",
    "        print i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "prices.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "prices_numbers = pd.DataFrame()\n",
    "for i in predictors:\n",
    "    if prices[i].dtype == \"int\" or prices[i].dtype == \"float\":\n",
    "        prices_numbers[i] = prices[i]\n",
    "prices_numbers['SalePrice'] = prices['SalePrice']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "min_max_scaler = preprocessing.MinMaxScaler()\n",
    "np_scaled = min_max_scaler.fit_transform(prices_numbers)\n",
    "prices_normalized = pd.DataFrame(np_scaled)\n",
    "prices_normalized.columns = prices_numbers.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>...</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.235294</td>\n",
       "      <td>0.207668</td>\n",
       "      <td>0.033420</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.949275</td>\n",
       "      <td>0.883333</td>\n",
       "      <td>0.12250</td>\n",
       "      <td>0.125089</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111517</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.241078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.255591</td>\n",
       "      <td>0.038795</td>\n",
       "      <td>0.555556</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.753623</td>\n",
       "      <td>0.433333</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.173281</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.347725</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.203583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.235294</td>\n",
       "      <td>0.217252</td>\n",
       "      <td>0.046507</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.934783</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.10125</td>\n",
       "      <td>0.086109</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.076782</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.727273</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.261908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.294118</td>\n",
       "      <td>0.191693</td>\n",
       "      <td>0.038561</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.311594</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.038271</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.063985</td>\n",
       "      <td>0.492754</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.145952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.235294</td>\n",
       "      <td>0.268371</td>\n",
       "      <td>0.060576</td>\n",
       "      <td>0.777778</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.927536</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.21875</td>\n",
       "      <td>0.116052</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.224037</td>\n",
       "      <td>0.153565</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.298709</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   MSSubClass  LotFrontage   LotArea  OverallQual  OverallCond  YearBuilt  \\\n",
       "0    0.235294     0.207668  0.033420     0.666667        0.500   0.949275   \n",
       "1    0.000000     0.255591  0.038795     0.555556        0.875   0.753623   \n",
       "2    0.235294     0.217252  0.046507     0.666667        0.500   0.934783   \n",
       "3    0.294118     0.191693  0.038561     0.666667        0.500   0.311594   \n",
       "4    0.235294     0.268371  0.060576     0.777778        0.500   0.927536   \n",
       "\n",
       "   YearRemodAdd  MasVnrArea  BsmtFinSF1  BsmtFinSF2    ...      WoodDeckSF  \\\n",
       "0      0.883333     0.12250    0.125089         0.0    ...        0.000000   \n",
       "1      0.433333     0.00000    0.173281         0.0    ...        0.347725   \n",
       "2      0.866667     0.10125    0.086109         0.0    ...        0.000000   \n",
       "3      0.333333     0.00000    0.038271         0.0    ...        0.000000   \n",
       "4      0.833333     0.21875    0.116052         0.0    ...        0.224037   \n",
       "\n",
       "   OpenPorchSF  EnclosedPorch  3SsnPorch  ScreenPorch  PoolArea  MiscVal  \\\n",
       "0     0.111517       0.000000        0.0          0.0       0.0      0.0   \n",
       "1     0.000000       0.000000        0.0          0.0       0.0      0.0   \n",
       "2     0.076782       0.000000        0.0          0.0       0.0      0.0   \n",
       "3     0.063985       0.492754        0.0          0.0       0.0      0.0   \n",
       "4     0.153565       0.000000        0.0          0.0       0.0      0.0   \n",
       "\n",
       "     MoSold  YrSold  SalePrice  \n",
       "0  0.090909    0.50   0.241078  \n",
       "1  0.363636    0.25   0.203583  \n",
       "2  0.727273    0.50   0.261908  \n",
       "3  0.090909    0.00   0.145952  \n",
       "4  1.000000    0.50   0.298709  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices_normalized.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x114b6c7d0>"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x115b592d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prices.boxplot(column = \"SalePrice\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x114b3c290>"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n7eSF6V1yWnoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11579c450>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prices.plot(kind='scatter', x='OverallQual', y='SalePrice', alpha=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x116470810>"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nf2qd5Sg5GQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113a8e390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prices.plot(kind='scatter', x='GrLivArea', y='SalePrice', alpha=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x113c68350>"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113c55950>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prices.plot(kind='scatter', x='YearBuilt', y='SalePrice', alpha=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>...</th>\n",
       "      <th>SaleType_ConLI</th>\n",
       "      <th>SaleType_ConLw</th>\n",
       "      <th>SaleType_New</th>\n",
       "      <th>SaleType_Oth</th>\n",
       "      <th>SaleType_WD</th>\n",
       "      <th>SaleCondition_AdjLand</th>\n",
       "      <th>SaleCondition_Alloca</th>\n",
       "      <th>SaleCondition_Family</th>\n",
       "      <th>SaleCondition_Normal</th>\n",
       "      <th>SaleCondition_Partial</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2003</td>\n",
       "      <td>2003</td>\n",
       "      <td>196.0</td>\n",
       "      <td>706</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>1976</td>\n",
       "      <td>1976</td>\n",
       "      <td>0.0</td>\n",
       "      <td>978</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2001</td>\n",
       "      <td>2002</td>\n",
       "      <td>162.0</td>\n",
       "      <td>486</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>1915</td>\n",
       "      <td>1970</td>\n",
       "      <td>0.0</td>\n",
       "      <td>216</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>350.0</td>\n",
       "      <td>655</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 262 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass  LotFrontage  LotArea  OverallQual  OverallCond  YearBuilt  \\\n",
       "0   1          60         65.0     8450            7            5       2003   \n",
       "1   2          20         80.0     9600            6            8       1976   \n",
       "2   3          60         68.0    11250            7            5       2001   \n",
       "3   4          70         60.0     9550            7            5       1915   \n",
       "4   5          60         84.0    14260            8            5       2000   \n",
       "\n",
       "   YearRemodAdd  MasVnrArea  BsmtFinSF1          ...            \\\n",
       "0          2003       196.0         706          ...             \n",
       "1          1976         0.0         978          ...             \n",
       "2          2002       162.0         486          ...             \n",
       "3          1970         0.0         216          ...             \n",
       "4          2000       350.0         655          ...             \n",
       "\n",
       "   SaleType_ConLI  SaleType_ConLw  SaleType_New  SaleType_Oth  SaleType_WD  \\\n",
       "0               0               0             0             0            1   \n",
       "1               0               0             0             0            1   \n",
       "2               0               0             0             0            1   \n",
       "3               0               0             0             0            1   \n",
       "4               0               0             0             0            1   \n",
       "\n",
       "   SaleCondition_AdjLand  SaleCondition_Alloca  SaleCondition_Family  \\\n",
       "0                      0                     0                     0   \n",
       "1                      0                     0                     0   \n",
       "2                      0                     0                     0   \n",
       "3                      0                     0                     0   \n",
       "4                      0                     0                     0   \n",
       "\n",
       "   SaleCondition_Normal  SaleCondition_Partial  \n",
       "0                     1                      0  \n",
       "1                     1                      0  \n",
       "2                     1                      0  \n",
       "3                     0                      0  \n",
       "4                     1                      0  \n",
       "\n",
       "[5 rows x 262 columns]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "predictors = []\n",
    "for i in prices.columns:\n",
    "    if i != 'SalePrice':\n",
    "        predictors.append(i)\n",
    "        \n",
    "X_train, X_test, y_train, y_test = model_selection.train_test_split(prices[predictors], prices.SalePrice, test_size=0.2, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "treereg = DecisionTreeRegressor(random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "scrolled": false,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "42162.355724391797"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores = cross_val_score(treereg, X_train, y_train, cv = 24, scoring='mean_squared_error')\n",
    "t = np.mean(np.sqrt(-scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    }
   ],
   "source": [
    "max_depth_range = range(1, 85)\n",
    "\n",
    "# list to store the average RMSE for each value of max_depth\n",
    "RMSE_scores = []\n",
    "\n",
    "# use LOOCV with each value of max_depth\n",
    "for depth in max_depth_range:\n",
    "    treereg = DecisionTreeRegressor(max_depth=depth, random_state=1)\n",
    "    MSE_scores = cross_val_score(treereg, X_train, y_train, scoring='mean_squared_error')\n",
    "    RMSE_scores.append(np.mean(np.sqrt(-MSE_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x116503250>"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1165114d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(max_depth_range, RMSE_scores)\n",
    "plt.xlabel('max_depth')\n",
    "plt.ylabel('RMSE (lower is better)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42482.074036571663, 6)"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(zip(RMSE_scores, max_depth_range))[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(criterion='mse', max_depth=6, max_features=None,\n",
       "           max_leaf_nodes=None, min_impurity_split=1e-07,\n",
       "           min_samples_leaf=1, min_samples_split=2,\n",
       "           min_weight_fraction_leaf=0.0, presort=False, random_state=1,\n",
       "           splitter='best')"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "treereg = DecisionTreeRegressor(max_depth=6, random_state=1)\n",
    "treereg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/nespinosadice2018/anaconda/lib/python2.7/site-packages/sklearn/metrics/scorer.py:90: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "41868.303989185959"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores = cross_val_score(treereg, X_train, y_train, cv = 24, scoring='mean_squared_error')\n",
    "np.mean(np.sqrt(-scores))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "rfreg = RandomForestRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "estimator_range = range(10, 50, 100)\n",
    "\n",
    "# list to store the average RMSE for each value of n_estimators\n",
    "RMSE_scores = []\n",
    "\n",
    "# use 5-fold cross-validation with each value of n_estimators (WARNING: SLOW!)\n",
    "for estimator in estimator_range:\n",
    "    rfreg = RandomForestRegressor(n_estimators=estimator, random_state=1)\n",
    "    MSE_scores = cross_val_score(rfreg, X_train, y_train, scoring='neg_mean_squared_error')\n",
    "    RMSE_scores.append(np.mean(np.sqrt(-MSE_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x114ef1590>"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x114b52f90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(estimator_range, RMSE_scores)\n",
    "plt.xlabel('n_estimators')\n",
    "plt.ylabel('RMSE (lower is better)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "n_estimators optimized at 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(32526.463597690206, 10)"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(zip(RMSE_scores, estimator_range))[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "# list of values to try for max_features\n",
    "#feature_range = range(1, len(predictors)+1)\n",
    "\n",
    "# list to store the average RMSE for each value of max_features\n",
    "#RMSE_scores = []\n",
    "\n",
    "# use 10-fold cross-validation with each value of max_features (WARNING: SLOW!)\n",
    "#for feature in feature_range:\n",
    "    #rfreg = RandomForestRegressor(n_estimators=150, max_features=feature, random_state=1)\n",
    "    #MSE_scores = cross_val_score(rfreg, X_train, y_train, scoring='mean_squared_error')\n",
    "    #RMSE_scores.append(np.mean(np.sqrt(-MSE_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "collapsed": true,
    "scrolled": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#plt.plot(feature_range, RMSE_scores)\n",
    "#plt.xlabel('max_features')\n",
    "#plt.ylabel('RMSE (lower is better)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Using a for loop, different values of max_features were used and by using the RMSE, the max_features was optimized at 62."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#sorted(zip(RMSE_scores, feature_range))[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
       "           max_features=62, max_leaf_nodes=None, min_impurity_split=1e-07,\n",
       "           min_samples_leaf=1, min_samples_split=2,\n",
       "           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
       "           oob_score=False, random_state=1, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfreg = RandomForestRegressor(n_estimators=10, max_features=62, random_state=1)\n",
    "rfreg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "31950.385134446598"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores = cross_val_score(rfreg, X_train, y_train, cv = 24, scoring='neg_mean_squared_error')\n",
    "np.mean(np.sqrt(-scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "feature_importance = pd.DataFrame({'feature':predictors, 'importance':rfreg.feature_importances_}).sort_values('importance', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>OverallQual</td>\n",
       "      <td>0.157437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>GrLivArea</td>\n",
       "      <td>0.145564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>GarageArea</td>\n",
       "      <td>0.083353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>ExterQual_TA</td>\n",
       "      <td>0.078937</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          feature  importance\n",
       "4     OverallQual    0.157437\n",
       "16      GrLivArea    0.145564\n",
       "27     GarageArea    0.083353\n",
       "153  ExterQual_TA    0.078937"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_importance.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1168, 261)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#X_important = rfreg.transform(X_train, threshold='mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#rfreg_important = RandomForestRegressor(n_estimators=10, random_state=1)\n",
    "#scores = cross_val_score(rfreg_important, X_important, y_train, cv = 24, scoring='neg_mean_squared_error')\n",
    "#np.mean(np.sqrt(-scores))\n",
    "#rfreg_important.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#cv_range = range(2, 30, 1)\n",
    "\n",
    "# list to store the average RMSE for each value of n_estimators\n",
    "#RMSE_scores = []\n",
    "\n",
    "# use 5-fold cross-validation with each value of n_estimators (WARNING: SLOW!)\n",
    "#for cv_score in cv_range:\n",
    "    #rfreg = RandomForestRegressor(n_estimators=10, random_state=1)\n",
    "    #MSE_scores = cross_val_score(rfreg, X_important, y_train, cv = 24, scoring='neg_mean_squared_error')\n",
    "    #RMSE_scores.append(np.mean(np.sqrt(-MSE_scores)))\n",
    "\n",
    "#sorted(zip(RMSE_scores, cv_range))[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TreeReg Score: 46267.1259865\n"
     ]
    }
   ],
   "source": [
    "scores = cross_val_score(treereg, X_train, y_train, cv = 2, scoring='neg_mean_squared_error')\n",
    "score = np.mean(np.sqrt(-scores))\n",
    "print \"TreeReg Score:\", score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RFReg Score: 31950.3851344\n"
     ]
    }
   ],
   "source": [
    "scores = cross_val_score(rfreg, X_train, y_train, cv = 24, scoring='neg_mean_squared_error')\n",
    "score = np.mean(np.sqrt(-scores))\n",
    "print \"RFReg Score:\", score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#scores = cross_val_score(rfreg_important, X_important, y_train, cv = 24, scoring='neg_mean_squared_error')\n",
    "#score = np.mean(np.sqrt(-scores))\n",
    "#print \"RFReg (Important Features) Score:\", score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "rfreg_predictions = rfreg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "test_predictions = pd.DataFrame(y_test)\n",
    "test_predictions[\"RFReg Predictions\"] = rfreg_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "treereg_predictions = treereg.predict(X_test)\n",
    "for i in range(len(treereg_predictions)):\n",
    "    treereg_predictions[i] = round(treereg_predictions[i], 1)\n",
    "test_predictions[\"TreeReg Predictions\"] = treereg_predictions\n",
    "\n",
    "#rfreg_importantfeatures_predictions = rfreg_important.predict(X_test)\n",
    "#test_predictions[\"RFReg (Important Features) Predictions\"] = rfreg_importantfeatures_predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Model Performance and Conclusion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>RFReg Predictions</th>\n",
       "      <th>TreeReg Predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>231500</td>\n",
       "      <td>208870.0</td>\n",
       "      <td>195070.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>179500</td>\n",
       "      <td>186240.0</td>\n",
       "      <td>140095.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>122000</td>\n",
       "      <td>124215.0</td>\n",
       "      <td>129696.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>649</th>\n",
       "      <td>84500</td>\n",
       "      <td>82000.0</td>\n",
       "      <td>69133.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1233</th>\n",
       "      <td>142000</td>\n",
       "      <td>150100.0</td>\n",
       "      <td>141960.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>325624</td>\n",
       "      <td>301175.0</td>\n",
       "      <td>381427.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>926</th>\n",
       "      <td>285000</td>\n",
       "      <td>287271.3</td>\n",
       "      <td>292524.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>831</th>\n",
       "      <td>151000</td>\n",
       "      <td>156105.6</td>\n",
       "      <td>164482.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1237</th>\n",
       "      <td>195000</td>\n",
       "      <td>215711.0</td>\n",
       "      <td>236673.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426</th>\n",
       "      <td>275000</td>\n",
       "      <td>249407.2</td>\n",
       "      <td>295718.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      SalePrice  RFReg Predictions  TreeReg Predictions\n",
       "258      231500           208870.0             195070.0\n",
       "267      179500           186240.0             140095.1\n",
       "288      122000           124215.0             129696.4\n",
       "649       84500            82000.0              69133.9\n",
       "1233     142000           150100.0             141960.6\n",
       "167      325624           301175.0             381427.4\n",
       "926      285000           287271.3             292524.4\n",
       "831      151000           156105.6             164482.5\n",
       "1237     195000           215711.0             236673.8\n",
       "426      275000           249407.2             295718.0"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_predictions.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "rfreg_predictions = []\n",
    "for i in range(len(test_predictions[\"SalePrice\"])):\n",
    "    diff = abs(test_predictions.iloc[i, 0] - test_predictions.iloc[i, 1])\n",
    "    rfreg_predictions.append(diff)\n",
    "\n",
    "test_predictions[\"RFReg Predictions Difference\"] = rfreg_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "treereg_predictions = []\n",
    "for i in range(len(test_predictions[\"SalePrice\"])):\n",
    "    diff = abs(test_predictions.iloc[i, 0] - test_predictions.iloc[i, 2])\n",
    "    treereg_predictions.append(diff)\n",
    "\n",
    "test_predictions[\"TreeReg Predictions Difference\"] = treereg_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "rfreg_predictions_percent = []\n",
    "for i in range(len(test_predictions[\"SalePrice\"])):\n",
    "    diff = abs((test_predictions.iloc[i, 0] - test_predictions.iloc[i, 1]) / test_predictions.iloc[i, 0]) * 100\n",
    "    rfreg_predictions_percent.append(diff)\n",
    "\n",
    "test_predictions[\"RFReg Percent Difference\"] = rfreg_predictions_percent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "treereg_predictions_percent = []\n",
    "for i in range(len(test_predictions[\"SalePrice\"])):\n",
    "    diff = abs((test_predictions.iloc[i, 0] - test_predictions.iloc[i, 2]) / test_predictions.iloc[i, 0]) * 100\n",
    "    treereg_predictions_percent.append(diff)\n",
    "\n",
    "test_predictions[\"TreeReg Percent Difference\"] = treereg_predictions_percent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>RFReg Predictions</th>\n",
       "      <th>TreeReg Predictions</th>\n",
       "      <th>RFReg Predictions Difference</th>\n",
       "      <th>TreeReg Predictions Difference</th>\n",
       "      <th>RFReg Percent Difference</th>\n",
       "      <th>TreeReg Percent Difference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>231500</td>\n",
       "      <td>208870.0</td>\n",
       "      <td>195070.0</td>\n",
       "      <td>22630.0</td>\n",
       "      <td>36430.0</td>\n",
       "      <td>9.775378</td>\n",
       "      <td>15.736501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>179500</td>\n",
       "      <td>186240.0</td>\n",
       "      <td>140095.1</td>\n",
       "      <td>6740.0</td>\n",
       "      <td>39404.9</td>\n",
       "      <td>3.754875</td>\n",
       "      <td>21.952591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>122000</td>\n",
       "      <td>124215.0</td>\n",
       "      <td>129696.4</td>\n",
       "      <td>2215.0</td>\n",
       "      <td>7696.4</td>\n",
       "      <td>1.815574</td>\n",
       "      <td>6.308525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>649</th>\n",
       "      <td>84500</td>\n",
       "      <td>82000.0</td>\n",
       "      <td>69133.9</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>15366.1</td>\n",
       "      <td>2.958580</td>\n",
       "      <td>18.184734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1233</th>\n",
       "      <td>142000</td>\n",
       "      <td>150100.0</td>\n",
       "      <td>141960.6</td>\n",
       "      <td>8100.0</td>\n",
       "      <td>39.4</td>\n",
       "      <td>5.704225</td>\n",
       "      <td>0.027746</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      SalePrice  RFReg Predictions  TreeReg Predictions  \\\n",
       "258      231500           208870.0             195070.0   \n",
       "267      179500           186240.0             140095.1   \n",
       "288      122000           124215.0             129696.4   \n",
       "649       84500            82000.0              69133.9   \n",
       "1233     142000           150100.0             141960.6   \n",
       "\n",
       "      RFReg Predictions Difference  TreeReg Predictions Difference  \\\n",
       "258                        22630.0                         36430.0   \n",
       "267                         6740.0                         39404.9   \n",
       "288                         2215.0                          7696.4   \n",
       "649                         2500.0                         15366.1   \n",
       "1233                        8100.0                            39.4   \n",
       "\n",
       "      RFReg Percent Difference  TreeReg Percent Difference  \n",
       "258                   9.775378                   15.736501  \n",
       "267                   3.754875                   21.952591  \n",
       "288                   1.815574                    6.308525  \n",
       "649                   2.958580                   18.184734  \n",
       "1233                  5.704225                    0.027746  "
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_predictions.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>RFReg Predictions</th>\n",
       "      <th>TreeReg Predictions</th>\n",
       "      <th>RFReg Predictions Difference</th>\n",
       "      <th>TreeReg Predictions Difference</th>\n",
       "      <th>RFReg Percent Difference</th>\n",
       "      <th>TreeReg Percent Difference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>123000</td>\n",
       "      <td>123067.5</td>\n",
       "      <td>102163.0</td>\n",
       "      <td>67.5</td>\n",
       "      <td>20837.0</td>\n",
       "      <td>0.054878</td>\n",
       "      <td>16.940650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1010</th>\n",
       "      <td>135000</td>\n",
       "      <td>135097.5</td>\n",
       "      <td>129696.4</td>\n",
       "      <td>97.5</td>\n",
       "      <td>5303.6</td>\n",
       "      <td>0.072222</td>\n",
       "      <td>3.928593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>750</th>\n",
       "      <td>96500</td>\n",
       "      <td>96430.0</td>\n",
       "      <td>102163.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>5663.0</td>\n",
       "      <td>0.072539</td>\n",
       "      <td>5.868394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>130000</td>\n",
       "      <td>129870.0</td>\n",
       "      <td>129696.4</td>\n",
       "      <td>130.0</td>\n",
       "      <td>303.6</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.233538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1434</th>\n",
       "      <td>160000</td>\n",
       "      <td>160160.0</td>\n",
       "      <td>141960.6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>18039.4</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>11.274625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      SalePrice  RFReg Predictions  TreeReg Predictions  \\\n",
       "1340     123000           123067.5             102163.0   \n",
       "1010     135000           135097.5             129696.4   \n",
       "750       96500            96430.0             102163.0   \n",
       "498      130000           129870.0             129696.4   \n",
       "1434     160000           160160.0             141960.6   \n",
       "\n",
       "      RFReg Predictions Difference  TreeReg Predictions Difference  \\\n",
       "1340                          67.5                         20837.0   \n",
       "1010                          97.5                          5303.6   \n",
       "750                           70.0                          5663.0   \n",
       "498                          130.0                           303.6   \n",
       "1434                         160.0                         18039.4   \n",
       "\n",
       "      RFReg Percent Difference  TreeReg Percent Difference  \n",
       "1340                  0.054878                   16.940650  \n",
       "1010                  0.072222                    3.928593  \n",
       "750                   0.072539                    5.868394  \n",
       "498                   0.100000                    0.233538  \n",
       "1434                  0.100000                   11.274625  "
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_predictions = test_predictions.sort_values(\"RFReg Percent Difference\", ascending = True)\n",
    "test_predictions.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RFReg Mean Percent Difference: 11.398929783\n",
      "TreeReg Mean Percent Difference: 14.8535089154\n"
     ]
    }
   ],
   "source": [
    "print \"RFReg Mean Percent Difference:\", test_predictions['RFReg Percent Difference'].mean()\n",
    "print \"TreeReg Mean Percent Difference:\", test_predictions['TreeReg Percent Difference'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Moving Forward\n",
    "- Continue to tune model\n",
    "    - Analyze effects of adjusting other features in the model\n",
    "- Analyze other effects:\n",
    "    - Do different regions (cities, states, etc) pay higher for certain features?\n",
    "    - How does the duration that a house was on the market for affect the final sale price?\n",
    "        - Effect of the number of owners \n",
    "    - Additional datapoints moving beyond descriptive features of a house\n",
    "        - How much other houses around it have been sold for"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
